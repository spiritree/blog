<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 深樹博客</title>
    <link>https://spiritree.github.io/blog/categories/javascript/</link>
    <description>Recent content in JavaScript on 深樹博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 28 Jan 2020 21:49:50 +0800</lastBuildDate><atom:link href="https://spiritree.github.io/blog/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入原理：Babel原理与Babel插件实践</title>
      <link>https://spiritree.github.io/blog/post/2020/01/babel-plugin/</link>
      <pubDate>Tue, 28 Jan 2020 21:49:50 +0800</pubDate>
      
      <guid>https://spiritree.github.io/blog/post/2020/01/babel-plugin/</guid>
      <description>前言 前端开发从「刀耕火种」过渡到「现代化」自动构建工程体系的过程中，Babel扮演了一个举足轻重的地位，使得我们可以用与时俱进的代码语法且最大程度上不受浏览器版本的约束，本文对如何使用Babel不再赘述，着重介绍Babel的原理和如何实现Babel插件。
什么是Babel？ Babel是JavaScript的编译器，它可以将你ES6(ES2015)+语法的代码编译到ES5版本从而兼容落后的浏览器。Babel也设计了一套插件架构去做代码转换，所以你可以去设计独创的代码转换规则。
在编写Babel插件之前，大家需要了解一下抽象语法树/AST的知识（熟知编译原理的可以快速跳过）。
抽象语法树（AST） 抽象语法树是高级编程语言（Java、JavaScript等）转换成机器语言的桥梁。解析器会根据ECMAScript 标准「JavaScript语言规范」来对代码字符串进行词法分析，拆分成一个个词法单元，再遍历各个词法单元进行语法分析构造出AST。我们通过如下代码来分析原理：
let str = &#39;test&#39;; str + &#39;abc&#39;; 词法分析（Lexical Analysis） 对代码解析时先进入词法分析阶段，tokenizer(分词器)会将原始代码按照特定字符(如let、var、=等保留字)分成一个个叫token的东西。token由分号、标签、变量、字符串等组成，tokenizer将tokens构造成如下数据结构。
这是一个JavaScript简易编译器中词法分析的实现：https://github.com/jamiebuilds/the-super-tiny-compiler/blob/master/the-super-tiny-compiler.js#L381
在线词法分析链接
[ { &amp;quot;type&amp;quot;: &amp;quot;Keyword&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;let&amp;quot; }, { &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;str&amp;quot; }, { &amp;quot;type&amp;quot;: &amp;quot;Punctuator&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;=&amp;quot; }, { &amp;quot;type&amp;quot;: &amp;quot;String&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&#39;test&#39;&amp;quot; }, { &amp;quot;type&amp;quot;: &amp;quot;Punctuator&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;;&amp;quot; }, { &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;str&amp;quot; }, { &amp;quot;type&amp;quot;: &amp;quot;Punctuator&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;+&amp;quot; }, { &amp;quot;type&amp;quot;: &amp;quot;String&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&#39;abc&#39;&amp;quot; }, { &amp;quot;type&amp;quot;: &amp;quot;Punctuator&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;;&amp;quot; } ] 语法分析（Syntactic Analysis） 词法分析完毕后进入语法分析阶段，语法分析将tokens重新格式化为描述语法各部分及其相互关系的表示形式，这就是抽象语法树。</description>
    </item>
    
    <item>
      <title>一键上传canvas所生成的图片至CDN</title>
      <link>https://spiritree.github.io/blog/post/2018/07/uploadcanvasimg/</link>
      <pubDate>Tue, 17 Jul 2018 17:47:01 +0800</pubDate>
      
      <guid>https://spiritree.github.io/blog/post/2018/07/uploadcanvasimg/</guid>
      <description>起因 最近在做动态生成海报的项目，有生成海报后上传当前canvas图片的需求。
分析 脑袋一拍，思索出流程是这样canvas=&amp;gt;base64=&amp;gt;POST接口。但是常见的CDN不支持base64啊！查了下发现有canvas.toBlob（兼容性为Chrome50+）
于是流程改为canvas=&amp;gt;blob=&amp;gt;POST接口，但发现CDN还是不吃这一套，接口报错
思来想去，决定用普通的手动上传方式&amp;lt;input type=&amp;quot;file&amp;quot; /&amp;gt;看下请求格式（如图）
从Content-Type可以看出需要使用FormData对象去上传
红框部分则是&amp;lt;input type=&amp;quot;file&amp;quot; /&amp;gt;所生成的
分析一通后，梳理流程为canvas=&amp;gt;blob=&amp;gt;File=&amp;gt;FormData=&amp;gt;POST
代码 upload = () =&amp;gt; { return new Promise((resolve, reject) =&amp;gt; { canvasInstance.toBlob(blob =&amp;gt; { // blob转file const file = new File([blob], &#39;poster.png&#39;, { type: &#39;image/png&#39;, lastModified: Date.now() }) const xhr = new XMLHttpRequest() xhr.onreadystatechange = () =&amp;gt; { try { if (xhr.readyState === 4 &amp;amp;&amp;amp; xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 400) { const res = JSON.</description>
    </item>
    
    <item>
      <title>addEventListener中的passive属性踩坑</title>
      <link>https://spiritree.github.io/blog/post/2018/06/passive/</link>
      <pubDate>Sat, 23 Jun 2018 22:42:31 +0800</pubDate>
      
      <guid>https://spiritree.github.io/blog/post/2018/06/passive/</guid>
      <description>起因 在移动端使用event.preventDefault()来阻止touchstart和touchmove事件发现无法实现
打开Chrome控制台发现打印了如下文字
[Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080 点进网页看看发生了什么！
AddEventListenerOptions defaults passive to false. With this change touchstart and touchmove listeners added to the document will default to passive:true (so that calls to preventDefault will be ignored)..
If the value is explicitly provided in the AddEventListenerOptions it will continue having the value specified by the page.
This is behind a flag starting in Chrome 54, and enabled by default in Chrome 56.</description>
    </item>
    
  </channel>
</rss>
